        static class TaskE {
          int match[],dist[];
          int maxmatch=0;
          int max=Integer.MAX_VALUE;
          boolean bfs(){
           dist=new int[n+3];
           ArrayDeque<Integer> ad=new ArrayDeque<>();
           for(int i=0;i<=n+2;i++){
            if(i==0||match[i]!=0)dist[i]=max;
            else{
             dist[i]=0;ad.add(i);
            }
           }
           while(!ad.isEmpty()){
            int u=ad.pollFirst();
            if(dist[u]>dist[0])break;
            for(int v:ja[u]){
             if(dist[match[v]]==max){
              ad.add(match[v]);dist[match[v]]=dist[u]+1;
             }
            }
           }
           return dist[0]!=max;
          }
          boolean dfs(int u){
           if(u==0)return true;
           for(int v:ja[u]){
            if(dist[match[v]]==dist[u]+1){
             if(dfs(match[v])){
              match[u]=v;
              match[v]=u;
              return true;
             }
            }
           }dist[u]=max;return false;
          }
          int hk(){
           while(bfs()){
            for(int i=1;i<=n+2;i++){
             if(match[i]==0){
              if(dfs(i))++maxmatch;
             }
            }
           }
           return maxmatch;
          }
    }
